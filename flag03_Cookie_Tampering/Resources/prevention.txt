Why is it dangerous ? 

Here, we modified the value of the cookie session. This is dangerous because if an attacker try to bruteforce the cookie session value, and succeed to find the eral value of another cookie, he will be able to access the account of someone else. Depending on the session, he can impersonate a session or obtain higher privileges if the session is from an admin account. Everyone having a specific cookie can act at the name of this specific user, without being truly the user.

How to prevent it ?
- Always verify on the server-side the value given by the client. Everything that is client-side can be modified by the client itself and can not be accurate.
- Correctly configure the cookie attribution. 
	- Use: HttpOnly in order to block the modification with JS. This prevent the access by document.cookie
	- Use 'Lax' or 'Strict' for the SameSite parameter to reduce CSRF attack or data leaks.
- Use a strong tool to encrypt the cookie session
- Make short session cookies, like 16hours max, and rotate it if needed.
- Reenforce security connexion with 2FA
- Log abnormal attempts and create alerts
- If the server detects an abnormal situation, ask the user to re-authenticate

Refs:
- https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#cookies
- https://cheatsheetseries.owasp.org/cheatsheets/Cookie_Theft_Mitigation_Cheat_Sheet.html
